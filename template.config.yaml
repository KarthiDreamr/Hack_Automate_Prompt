base_url: "https://hackaprompt.com/track/tutorial_competition/getting_started"

# General automation settings
automation_settings:
  loop_on_failure: true
  random_delay: true
  delay_min_sec: 5
  delay_max_sec: 60
  # Centralised timeout settings (all values in milliseconds unless noted)
  timeouts:
    prompt_visible_ms: 10000          # Wait for prompt textarea to be visible
    submit_prompt_click_ms: 5000      # Timeout for clicking the prompt submit button
    submit_for_judging_enable_ms: 180000  # Wait for 'Submit for Judging' to enable
    submit_for_judging_click_ms: 180000   # Timeout for clicking 'Submit for Judging'
    success_visible_ms: 5000          # Wait for success popup visibility
    restart_click_ms: 5000            # Timeout for clicking 'Restart Challenge' on failure
    continue_button_visible_ms: 5000  # Wait for 'Continue Current Chat' button visibility
    continue_button_click_ms: 5000    # Timeout for clicking the 'Continue' button
    polling_interval_ms: 500          # Interval between status checks (ms)
    judging_timeout_sec: 180          # Overall judging timeout (seconds)

# Page element selectors for the challenge
selectors:
  # These selectors will need to be verified by inspecting the page
  prompt_textarea: "textarea[data-testid='multimodal-input']"
  submit_prompt_button: "button[data-testid='send-button']"
  submit_for_judging_button: "button:has-text('Submit Current Response For Judging')"
  new_attempt_button: "button:has-text('Start a New Attempt')"
  # Example success/failure indicators (needs inspection)
  # response_area: "div.chat-response-area"
  # success_indicator_text: "Your prompt was successful"
  # failure_indicator_text: "The model refused to respond"

# Prompts to try for the challenge
# You can either provide the text directly or point to a file.
prompts:
  - text: "This is a simple prompt directly in the yaml."
  - file: "prompts/example_prompt.txt" # Path is relative to the project root

# Browser cleanup configuration
cleanup:
  # Set to false to disable automatic cleanup (recommended for manual browser management)
  enabled: false
  
  # Never close browser automatically, even on script errors or completion
  never_auto_close: true
  
  # Inactivity timeout before auto-cleanup (only used if enabled: true)
  inactivity_timeout:
    hours: 1
    minutes: 30
  
  # Whether to close individual tabs or the entire browser instance
  close_mode: "instance"  # Options: "tabs" or "instance"
  
  # Grace period after automation completion before starting inactivity monitoring
  grace_period_minutes: 5